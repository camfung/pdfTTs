any sentence, given a model. This is done recursively. All sentences are constructed from atomic sentences and the five connectives; therefore, we need to specify how to compute the truth of atomic sentences and how to compute the truth of sentences formed with each of the five connectives. Atomic sentences are easy: True is true in every model and False is false in every model. The truth value of every other proposition symbol must be specified directly in the model. For example, in the model given earlier, is false. For complex sentences, we have five rules, which hold for any subsentences and (atomic or complex) in any model (here “iff” means “if and only if”): is true iff is false in . is true iff both and are true in . is true iff either or is true in . is true unless is true and is false in . is true iff and are both true or both false in . The rules can also be expressed with truth tables that specify the truth value of a complex sentence for each possible assignment of truth values to its components. Truth tables for the five connectives are given in Figure 7.8 . From these tables, the truth value of any sentence can be computed with respect to any model by a simple recursive evaluation. For example, the sentence , evaluated in , gives . Exercise 7.TRUV asks you to write the algorithm PL-TRUE? which computes the truth value of a propositional logic sentence in a model . Figure 7.8 23 = 8  P1,2 m1 P1,2 P Q m ¬P P m P ∧ Q P Q m P ∨ Q P Q m P ⇒ Q P Q m P ⇔ Q P Q m  s m ¬P1,2 ∧ (P2,2 ∨ P3,1) m1 true ∧ (false ∨ true) = true ∧ true = true (s, m), s m Truth tables for the five logical connectives. To use the table to compute, for example, the value of when is true and is false, first look on the left for the row where is true and is false (the third row). Then look in that row under the column to see the result: true. Truth table The truth tables for “and,” “or,” and “not” are in close accord with our intuitions about the English words. The main point of possible confusion is that is true when is true or is true or both. A different connective, called “exclusive or” (“xor” for short), yields false when both disjuncts are true. There is no consensus on the symbol for exclusive or; some choices are or or . 8 Latin uses two separate words: “vel” is inclusive or and “aut” is exclusive or. The truth table for may not quite fit one’s intuitive understanding of “ implies ” or “if then .” For one thing, propositional logic does not require any relation of causation or relevance between and . The sentence “5 is odd implies Tokyo is the capital of Japan” is a true sentence of propositional logic (under the normal interpretation), even though it is a decidedly odd sentence of English. Another point of confusion is that any implication is true whenever its antecedent is false. For example, “5 is even implies Sam is smart” is true, regardless of whether Sam is smart. This seems bizarre, but it makes sense if you think of “ ” as saying, “If is true, then I am claiming that is true; otherwise I am making no claim.” The only way for this sentence to be false is if is true but is false. The biconditional, , is true whenever both and are true. In English, this is often written as “ if and only if .” Many of the rules of the wumpus world are best written using . For example, a square is breezy if a neighboring square has a pit, and a square is breezy only if a neighboring square has a pit. So we need a biconditional, P ∨ Q P Q P Q P ∨ Q P ∨ Q P Q 8 . ∨ ≠ ⊕ ⇒ P Q P Q P Q P ⇒ Q P Q P Q P ⇔ Q P ⇒ Q Q ⇒ P P Q ⇔ where means that there is a breeze in [1,1]. 7.4.3 A simple knowledge base Now that we have defined the semantics for propositional logic, we can construct a knowledge base for the wumpus world. We focus first on the immutable aspects of the wumpus world, leaving the mutable aspects for a later section. For now, we need the following symbols for each location: is true if there is a pit in . is true if there is a wumpus in , dead or alive.