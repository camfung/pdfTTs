7.4 Propositional Logic: A Very Simple Logic We now present propositional logic. We describe its syntax (the structure of sentences) and its semantics (the way in which the truth of sentences is determined). From these, we derive a simple, syntactic algorithm for logical inference that implements the semantic notion of entailment. Everything takes place, of course, in the wumpus world. Propositional logic 7.4.1 Syntax The syntax of propositional logic defines the allowable sentences. The atomic sentences consist of a single proposition symbol. Each such symbol stands for a proposition that can be true or false. We use symbols that start with an uppercase letter and may contain other letters or subscripts, for example: , , , , and FacingEast. The names are arbitrary but are often chosen to have some mnemonic value—we use to stand for the proposition that the wumpus is in [1,3]. (Remember that symbols such as are atomic, i.e., , 1, and 3 are not meaningful parts of the symbol.) There are two proposition symbols with fixed meanings: True is the always-true proposition and False is the always-false proposition. Complex sentences are constructed from simpler sentences, using parentheses and operators called logical connectives. There are five connectives in common use: Atomic sentences Proposition symbol P Q R W1,3 W1,3 W1,3 W Complex sentences Logical connectives (not). A sentence such as is called the negation of . A literal is either an atomic sentence (a positive literal) or a negated atomic sentence (a negative literal). Negation Literal (and). A sentence whose main connective is , such as , is called a conjunction; its parts are the conjuncts. (The looks like an “A” for “And.”) Conjunction (or). A sentence whose main connective is , such as , is a disjunction; its parts are disjuncts—in this example, and . Disjunction ¬ ¬W1,3 W1,3 ∧ ∧ W1,3 ∧ P3,1 ∧ ∨ ∨ (W1,3 ∧ P3,1) ∨ W2,2 (W1,3 ∧ P3,1) W2,2 (implies). A sentence such as is called an implication (or conditional). Its premise or antecedent is , and its conclusion or consequent is . Implications are also known as rules or if–then statements. The implication symbol is sometimes written in other books as or . Implication Premise Conclusion Rules (if and only if). The sentence is a biconditional. Biconditional Figure 7.7 gives a formal grammar of propositional logic. (BNF notation is explained on page 1030.) The BNF grammar is augmented with an operator precedence list to remove ambiguity when multiple operators are used. The “not” operator has the highest precedence, which means that in the sentence the binds most tightly, giving us the equivalent of rather than . (The notation for ordinary arithmetic is the ⇒ (W1,3 ∧ P3,1) ⇒ ¬W2,2 (W1,3 ∧ P3,1) ¬W2,2 ⊃ → ⇔ W1,3 ⇔ ¬W2,2  (¬) ¬A ∧ B ¬ (¬A) ∧ B ¬(A ∧ B) same: is 2, not –6.) When appropriate, we also use parentheses and square brackets to clarify the intended sentence structure and improve readability. Figure 7.7 A BNF (Backus–Naur Form) grammar of sentences in propositional logic, along with operator precedences, from highest to lowest. 7.4.2 Semantics Having specified the syntax of propositional logic, we now specify its semantics. The semantics defines the rules for determining the truth of a sentence with respect to a particular model. In propositional logic, a model simply sets the truth value—true or false— for every proposition symbol. For example, if the sentences in the knowledge base make use of the proposition symbols , and , then one possible model is Truth value −2 + 4 P1,2, P2,2 P3,1 m1 = {P1,2 = false, P2,2 = false, P3,1 = true} . With three proposition symbols, there are possible models—exactly those depicted in Figure 7.5 . Notice, however, that the models are purely mathematical objects with no necessary connection to wumpus worlds. is just a symbol; it might mean “there is a pit in [1,2]” or “I’m in Paris today and tomorrow.” The semantics for propositional logic must specify how to compute the truth value of